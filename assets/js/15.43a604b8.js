(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{325:function(r,t,a){r.exports=a.p+"assets/img/download-grbl-source-code.91521d75.png"},326:function(r,t,a){r.exports=a.p+"assets/img/add-platformio-support.47e46e59.png"},327:function(r,t,a){r.exports=a.p+"assets/img/compile-grbl.10b12ef5.png"},328:function(r,t,a){r.exports=a.p+"assets/img/serial-port.9610a9b2.png"},329:function(r,t,a){r.exports=a.p+"assets/img/upload-grbl.2113b8ce.png"},330:function(r,t,a){r.exports=a.p+"assets/img/connect-grbl.89ad43b0.png"},348:function(r,t,a){"use strict";a.r(t);var s=a(25),o=Object(s.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"开始"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开始"}},[r._v("#")]),r._v(" 开始")]),r._v(" "),t("h2",{attrs:{id:"下载grbl源代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#下载grbl源代码"}},[r._v("#")]),r._v(" 下载grbl源代码")]),r._v(" "),t("p",[r._v("一般情况下，我们只需要在ArduinoIDE中下载grbl库，然后引用它的头文件即可使用，但是我们是为了研究它的源码，所以我们需要从github下载它的源代码，仓库地址为："),t("a",{attrs:{href:"https://github.com/gnea/grbl",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://github.com/gnea/grbl"),t("OutboundLink")],1),r._v(",你可以使用版本管理工具"),t("code",[r._v("git")]),r._v("克隆它，也可以下载压缩包（作者推荐）。\n"),t("img",{attrs:{src:a(325),alt:"download-grbl-cource-code"}})]),r._v(" "),t("h2",{attrs:{id:"为grbl源码添加platformio支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为grbl源码添加platformio支持"}},[r._v("#")]),r._v(" 为grbl源码添加platformio支持")]),r._v(" "),t("ol",[t("li",[r._v("我们下载并安装"),t("code",[r._v("Virtual Studio Code")]),r._v("（下称VScode），然后再搜索安装VScode的插件"),t("code",[r._v("platformio")]),r._v("（PlatformIO（也称PIO）是一款开源且跨平台的嵌入式系统与产品程序的开发工具，可用于多种嵌入式架构与平台的开发。它也为VScode提供了插件）。")]),r._v(" "),t("li",[r._v("用VScode打开下载的grbl源代码并创建一个名为"),t("code",[r._v("platformio.ini")]),r._v("的文件，内容如下：")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("[platformio]\nsrc_dir = grbl # 指定源代码位置\nbuild_dir = build # 指定构建输出位置\n\n[env:default]\nplatform = atmelavr # 指定单片机平台\nboard_build.mcu = atmega328p # 指定MCU\nboard_build.f_cpu = 16000000L # 指定CPU频率，这里使用的是16M晶振\n\nupload_protocol = arduino # 指定烧录协议\nmonitor_speed = 115200 # 指定串口监控波特率，如果你使用PIO自带的串口监视的话\n")])])]),t("p",[t("img",{attrs:{src:a(326),alt:"add-platformio-support"}})]),r._v(" "),t("h2",{attrs:{id:"编译grbl源代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译grbl源代码"}},[r._v("#")]),r._v(" 编译grbl源代码")]),r._v(" "),t("p",[r._v("点击VScode左侧的PIO图标，在菜单中选择"),t("code",[r._v("build")]),r._v("，如果编译成功，则会在右下侧输出success标记。如果不成功，请确保步骤跟上面说的一致，还不成功的话自行查找问题，直到成功为止。如下图："),t("br"),r._v(" "),t("img",{attrs:{src:a(327),alt:"compile grbl"}})]),r._v(" "),t("h2",{attrs:{id:"连接arduino到电脑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接arduino到电脑"}},[r._v("#")]),r._v(" 连接Arduino到电脑")]),r._v(" "),t("p",[r._v("用USB线连接Arduino和电脑，在电脑的硬件管理器中会看到虚拟出来的串口，如果没有识别出来，需要安装Arduino串口芯片驱动。如下图："),t("br"),r._v(" "),t("img",{attrs:{src:a(328),alt:"serial-port"}})]),r._v(" "),t("h2",{attrs:{id:"烧录grbl固件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#烧录grbl固件"}},[r._v("#")]),r._v(" 烧录grbl固件")]),r._v(" "),t("p",[r._v("点击upload按钮，PIO会自动查找可用的串口，等待上传成功即可。如下图："),t("br"),r._v(" "),t("img",{attrs:{src:a(329),alt:"upload grbl"}})]),r._v(" "),t("h2",{attrs:{id:"连接上位机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接上位机"}},[r._v("#")]),r._v(" 连接上位机")]),r._v(" "),t("p",[r._v("下载上位机软件"),t("code",[r._v("lasergrbl")]),r._v("并安装，在左侧的串口连接区选择对应的串口点击连接，连接成功后会出现经典的grbl欢迎信息。如下图："),t("br"),r._v(" "),t("img",{attrs:{src:a(330),alt:"connect grbl"}}),t("br"),r._v("\n在上位机的console中，可以输入G代码控制grbl，G代码一般由CAM（计算机辅助制造）软件生成。在这里我们只需要一些简单的G代码，暂时用不到CAM软件。")]),r._v(" "),t("p",[r._v("至此，grbl源码的准备工作已做好，我们将用VScode做编辑器，用PIO做为编译器工具，用lasergrbl做上位机和grbl进行交互。如果你已经完成，恭喜你，请为你自己点个赞，为自己点赞的同时也别忘了给我点个赞^_^。")])])}),[],!1,null,null,null);t.default=o.exports}}]);